##############################################################################
#                                                                            #
#                    Example pgfutils configuration file                     #
#                                                                            #
##############################################################################


#
# This documents the format of the configuration file, and shows the default
# values. If you do not create a custom configuration file, the values below
# will be used.
#
# As shown here, comments can be inserted by prefixing with a hash. Do not use
# inline comments (i.e., at the end of a line) as they will be treated as part
# of the value!
#



# Details of your TeX setup.
[tex]

# Can be xelatex, lualatex, or pdflatex.
engine = xelatex

# These are the default dimensions of a PDF produced by XeLaTeX using the
# article class with no options in TeX Live 2018.
#
# To measure your own document, add \usepackage{layouts} to the preamble, and
# then place the following commands somewhere in the document:
#
# \clearpage
# \begin{figure}
#   \currentpage\pagedesign
# \end{figure}
#
# This will generate a figure showing the current layout with a table of the
# corresponding dimensions.
#
# The units can be millimeters, centimeters, inches, or points. Anything
# without a unit is assumed to be inches, the default unit of Matplotlib.
text_width = 345 points
text_height = 550 points
marginpar_width = 65 points
marginpar_sep = 11 points

# For multi-column layouts.
num_columns = 1
columnsep = 10 points



# Settings for plotting.
[pgfutils]

# General font settings.
# Can be serif, sans-serif, monospace, or cursive.
font_family = serif
# If not given, the default font for the family is used.
font_name =
# General font size (axes etc.).
font_size = 10

# Background colors. An empty value indicates transparent; the values 'none' or
# 'transparent' can also be used.
# Entire figure (including labels etc.)
figure_background =
# Just the axes.
axes_background = white

# Plot settings.
line_width = 1
axes_line_width = 0.6

# Legend settings.  Note that any opacity given in the border and background
# colors is overridden by the legend_opacity value.
legend_border_width = 0.6
legend_border_color = (0.8, 0.8, 0.8)
legend_background = (1, 1, 1)
legend_opacity = 0.8
legend_font_size = 10

# Custom preamble; by default, this is empty. This is useful if you're doing
# something non-standard and you need to ensure when Matplotlib runs TeX (e.g.,
# to measure string sizes) that it is configured in the same manner as your
# final document.  This can span over multiple lines. Put one or more spaces
# before each line; these will be chopped off when the configuration is loaded.
preamble =

# If enabled, then any instances of $basedir or ${basedir} in the preamble will
# be replaced with the absolute path to the base or top-level directory, i.e.,
# the directory the script is being run from (and that would contain
# pgfutils.cfg).
preamble_substitute = false

# One common use for the preamble is to load custom fonts.  The path to fonts
# should be absolute, not relative, as Matplotlib runs TeX in a different
# directory when measuring string sizes. This can be easily achieved by using
# preamble substitution:
#
#preamble_substitute = true
#preamble =
#  \usepackage{fontspec}
#  \setmainfont[
#    Path           = ${basedir}/fonts/,
#    Extension      = .ttf,
#    UprightFont    = *-Regular,
#    BoldFont       = *-Bold,
#    BoldItalicFont = *-BoldItalic
#  ]{MyCustomFontName}
#font_family = serif
#font_name = MyCustomFontName

# Extra library-specific file trackers to install.
extra_tracking =


# Specific Matplotlib rcParams to set.
# These will override values determined by pgfutils.
[rcParams]

# Format: lines.linewidth = 2



# Post-processing options.
[postprocessing]

# Convert use of the pgfpicture environment to the tikzpicture environment.
# This allows the TikZ externalisation library to be used with generated
# figures. You will need to load the tikz package instead of the pgf package.
tikzpicture = false

# Rasterised images (e.g., from imshow() or colorbars) are placed in the same
# directory as the output PGF. They are included via the \pgfimage macro with
# no directory path. If your figures are in a sub-directory, this will mean TeX
# cannot find the figures. If this option is on, the \pgfimage call is updated
# to include the directory name. For example, if you have a script
# figures/plots/full_speed.py, this will make TeX look for the raster image
# figures/plots/full_speed-img0.png rather than the default full_speed-img0.png
#
# NB. THIS REQUIRES YOU TO RUN THE SCRIPT FROM THE SAME DIRECTORY AS YOUR MAIN
# TEX FILE.
fix_raster_paths = true
